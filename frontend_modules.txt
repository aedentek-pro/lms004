# Purple LMS Frontend Module Details

This document provides a comprehensive overview of the frontend architecture, modules, and components of the Purple LMS application.

## 1. Core Application Setup

### `index.tsx`
- **Purpose**: The entry point of the React application.
- **Functionality**: It finds the root DOM element (`<div id="root">`) in `index.html` and uses `ReactDOM.createRoot()` to render the main `App` component into it. It also wraps the `App` component in `<React.StrictMode>` for development-time checks.

### `App.tsx`
- **Purpose**: The root component of the application, managing global state and routing.
- **State Management**: Holds all primary application state using `useState` hooks, including `currentUser`, `users`, `courses`, `studentProgress`, `notifications`, etc.
- **Data Fetching**: Uses `useEffect` to call `initializeDB()` on initial load, fetching all data from the mock API/localStorage.
- **Routing**: Conditionally renders either the `AuthScreen` or the appropriate user dashboard (`StudentDashboard`, `InstructorDashboard`, `AdminDashboard`) based on whether a `currentUser` is set.
- **Global Components**: Renders global UI elements like `Toast` for notifications and the `WhatsAppFloat` button.
- **Core Logic**: Contains all the handler functions (`handleLogin`, `handleCreateCourse`, `handleModuleComplete`, etc.) that manipulate the application's state. These functions are passed down as props to child components.

### `index.html`
- **Purpose**: The main HTML file that serves the application.
- **Structure**: Includes the root div, meta tags, and an `importmap` script to manage ES module imports for libraries like React, @google/genai, and Tailwind CSS from a CDN. This avoids the need for a local bundler like Webpack or Vite.
- **Styling**: Loads Tailwind CSS via CDN and includes a `<style>` block for custom animations and utility classes.

## 2. Data Layer

### `types.ts`
- **Purpose**: Defines all TypeScript interfaces and enums used across the application.
- **Details**: Contains types for `User`, `Course`, `Module`, `Quiz`, `StudentProgress`, `Notification`, etc., ensuring type safety and code clarity.

### `constants.ts`
- **Purpose**: Provides initial mock data for the application.
- **Details**: Exports arrays of `USERS`, `COURSES`, `STUDENT_PROGRESS`, etc., which are used to seed the database on the first run.

### `db.ts` & `mockApi.ts`
- **Purpose**: Simulates a backend API for data persistence.
- **`mockApi.ts`**: Uses `localStorage` to store and retrieve application data. It simulates network latency with `setTimeout` to mimic real API calls. It handles CRUD operations for all major data types.
- **`db.ts`**: Exports a `db` object that acts as the primary data access layer for the application. It calls the corresponding methods in `mockApi.ts`. It also includes functions for managing large file blobs (like videos or assignment files) in `IndexedDB`, which is better suited for large data than `localStorage`.

## 3. UI Components

### 3.1. Authentication (`components/auth/`)

#### `AuthScreen.tsx`
- **Purpose**: Handles user login, signup, and OTP verification.
- **Functionality**: A multi-state component that switches between login and signup views. The signup flow is a two-step process involving detail entry and OTP verification. It includes a section for quick-logging into demo accounts.

### 3.2. Dashboards (`components/{student|instructor|admin}/`)

- **`StudentDashboard.tsx`**: Main view for students. Features a home page with "Continue Learning" and "Upcoming Sessions" sections. Manages modals for viewing course details (`CourseDetailView`) and enrolling (`EnrollmentModal`).
- **`InstructorDashboard.tsx`**: Main view for instructors. Focuses on managing the courses they've created.
- **`AdminDashboard.tsx`**: The main view for administrators. Provides an overview of platform stats and access to all management pages.

### 3.3. Pages (`components/pages/`)

These are the main content views rendered inside the dashboards, typically switched by the `BottomNavBar`.

- **`CourseListPage.tsx`**: Displays a grid of `CourseCard` components. Handles logic for creating, viewing, editing, and deleting courses through modals. The view is customized based on the current user's role.
- **`WebinarListPage.tsx`**: Displays a grid of `WebinarCard` components. Manages modals for scheduling, joining, and viewing attendees of live sessions.
- **`CommunityPage.tsx`**: A full-page real-time chat interface.
- **`OneToOnePage.tsx`**: Manages scheduling, accepting/rejecting, and viewing 1-on-1 coaching sessions.
- **`AnalyticsPage.tsx` (`admin/`)**: Displays charts and key metrics about platform usage, revenue, and enrollments.

### 3.4. Shared Components (`components/shared/`)

These are generic, reusable components used throughout the application.

- **`BottomNavBar.tsx`**: The primary navigation element on mobile, fixed to the bottom of the screen.
- **`Card.tsx`**: A styled container component with hover effects, used for most grid items.
- **`Modal.tsx`**: A generic modal/dialog component with a title, close button, and customizable size.
- **`ProgressBar.tsx`**: A simple progress bar used in `CourseCard` to show student progress.
- **`NotificationBell.tsx`**: The bell icon in the header that shows a dropdown of user notifications.
- **`CourseCard.tsx`**: Displays a summary of a course, including title, instructor, rating, and progress.
- **`WebinarCard.tsx`**: Displays a summary of a live session with actions to join, register, or share.
- `Toast.tsx`, `ConfirmationModal.tsx`, `StarRating.tsx`, `WhatsAppFloat.tsx`, `AppSettingsMenu.tsx`, `UserProfileMenu.tsx`, `VideoPlayer.tsx`.

### 3.5. Forms (`components/forms/`)

- **`CourseCreationForm.tsx`**: A complex form for creating and editing courses. It includes dynamic fields for adding/removing modules and quiz questions. It also integrates with the Gemini API to auto-generate a course outline.
- **`WebinarCreationForm.tsx`**: A form for scheduling new live webinar sessions.
- **`UserEditForm.tsx`**: A simple form used by admins to edit a user's name and role.

### 3.6. Role-Specific Views (`components/{student|instructor}/`)

- **`QuizView.tsx`**: A step-by-step interface for students to take a quiz.
- **`CourseDetailView.tsx`**: The main interface for a student taking a course. It has a sidebar for navigation between modules and the main content area for viewing videos or text.
- **`AssignmentSubmissionModal.tsx` & `AssignmentViewModal.tsx`**: Modals for students to submit and view their assignments.
- **`StudentProgressView.tsx`**: A view for instructors to see the progress of all enrolled students in a specific course.
- **`AssignmentGradingModal.tsx`**: A modal for instructors to grade a student's assignment submission.

## 4. Icons (`components/icons/`)

### `Icons.tsx`
- **Purpose**: A single file containing all SVG icons used in the application.
- **Implementation**: Each icon is a React functional component built on a shared `IconBase` component. This allows for easy styling and usage throughout the app.
